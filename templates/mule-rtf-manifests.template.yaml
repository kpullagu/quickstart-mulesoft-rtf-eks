AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy MuleSoft RTF into an existing EKS cluster (qs-1r813c2of).
Parameters:
  ClusterName:
    Type: String
    Description: Name of the EKS cluster to join
  MuleSoftUsername:
    Description: The User Name associated with the MuleSoft account.
    Type: String
    NoEcho: true
  MuleSoftPassword:
    Description: The password associated with the MuleSoft account.
    Type: String
    NoEcho: true
    Default: ''
  MuleSoftAccountID:
    Description: The MuleSoft account ID that you want to associate this RTF cluster with.
    Type: String
    NoEcho: true
  MuleSoftMFAAPIToken:
    Description: An MFA API token generated by your MuleSoft Admin.
    Type: String
    NoEcho: true
    Default: ''
  LoadBalancerType:
    Type: String
    Default: ALB
    AllowedValues:
      - ALB
      - NLB
    Description: EKS Service Load Balancer Type.
  WorkloadNamespace:
    Default: "rtf"
    Type: String
    Description: The Kubernetes namespace to use when provisioning the workload.
  MuleSoftClusterName:
    Description: The name for the MuleSoft RTF cluster.
    Type: String
    AllowedPattern: "[a-zA-Z0-9_-]*"
    Default: Mule-RTF-EKS
Conditions:
  NetworkLoadBalancer: !Equals [!Ref LoadBalancerType, NLB]
  ApplicationLoadBalancer: !Equals [!Ref LoadBalancerType, ALB]
Resources:
  EKSMetricsServer:
    Type: 'AWSQS::Kubernetes::Helm'
    Properties:
      ClusterID: !Ref ClusterName
      Namespace: kube-system
      Chart: stable/metrics-server
      Values:
        image.repository: k8s.gcr.io/metrics-server/metrics-server
        image.tag: v0.4.1
        serviceAccount.name: metrics-server
        serviceAccount.create: true
  KubeManifestRtfNLBService:
    Condition: NetworkLoadBalancer
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn:
      - EKSMetricsServer
      - EKSClusterNamespace
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ClusterName: !Ref ClusterName
      Namespace: !Ref WorkloadNamespace
      # Kubernetes manifest URL
      Manifest: !Sub |
        apiVersion: v1
        kind: Service
        metadata:
          name: rtf-service
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-type: nlb
            service.beta.kubernetes.io/aws-load-balancer-ssl-cert: ${CertificateArn}
          labels:
            app: rtf
        spec:
          selector:
            app: rtf
          type: LoadBalancer
          ports:
          - name: https
            protocol: TCP
            port: 443
            targetPort: 9090
          - name: http
            protocol: TCP
            port: 80
            targetPort: 9090
  KubeManifestRtfALBService:
    Condition: ApplicationLoadBalancer
    Type: AWSQS::Kubernetes::Resource
    DependsOn:
      - EKSMetricsServer
      - EKSClusterNamespace
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ClusterName: !Ref ClusterName
      Namespace: !Ref WorkloadNamespace
      Manifest: |
        apiVersion: v1
        kind: Service
        metadata:
          name: rtf-service
          labels:
            app: rtf
        spec:
          type: NodePort
          selector:
            app: rtf
          ports:
          - name: https
            protocol: TCP
            port: 443
            targetPort: 8080
          - name: http
            protocol: TCP
            port: 80
            targetPort: 8080
  KubeManifestRtfIngress:
    Condition: ApplicationLoadBalancer
    Type: AWSQS::Kubernetes::Resource
    DependsOn:
      - KubeManifestRtfALBService
      - EKSClusterNamespace
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: !Ref WorkloadNamespace
      Manifest: !Sub |
        apiVersion: extensions/v1beta1
        kind: Ingress
        metadata:
          name: rtf-ingress
          annotations:
            # trigger the alb-ingress-controller
            kubernetes.io/ingress.class: rtf-alb
            # set ALB parameters
            alb.ingress.kubernetes.io/target-type: ip
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/certificate-arn: ${CertificateArn}
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
            alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
            alb.ingress.kubernetes.io/load-balancer-attributes: routing.http2.enabled=true
            # allow 404s on the health check
            alb.ingress.kubernetes.io/healthcheck-path: "/_admin/status"
            alb.ingress.kubernetes.io/success-codes: "200,404"
            alb.ingress.kubernetes.io/group.name: rtf-eks-alb1
            alb.ingress.kubernetes.io/backend-protocol: HTTP
        spec:
          # forward all requests to nginx-ingress-controller
          rules:
            - http:
                paths:
                  - path: /*
                    backend:
                      serviceName: app
                      servicePort: 80
  EKSClusterNamespace:
    Type: AWSQS::Kubernetes::Resource
    DependsOn:
      - EKSMetricsServer
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ClusterName: !Ref ClusterName
      Namespace: default
      # Kubernetes manifest URL
      Manifest: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: rtf
          labels:
            name: rtf
